// Andrés Mejía
using namespace std;
#include <algorithm>
#include <iostream>
#include <iterator>
#include <numeric>
#include <sstream>
#include <fstream>
#include <cassert>
#include <climits>
#include <cstdlib>
#include <cstring>
#include <string>
#include <cstdio>
#include <vector>
#include <cmath>
#include <queue>
#include <deque>
#include <stack>
#include <list>
#include <map>
#include <set>

////////////// Prewritten code follows. Look down for solution. ////////////////
#define foreach(x, v) for (typeof (v).begin() x=(v).begin(); x !=(v).end(); ++x)
#define For(i, a, b) for (int i=(a); i<(b); ++i)
#define D(x) cout << #x " is " << (x) << endl

const double EPS = 1e-9;
int cmp(double x, double y = 0, double tol = EPS) {
    return (x <= y + tol) ? (x + tol < y) ? -1 : 0 : 1;
}
////////////////////////// Solution starts below. //////////////////////////////

int main(){
    #ifndef LOCAL
    #define problem_name "invers"
    assert( freopen(problem_name ".in", "r", stdin) != NULL);
    assert( freopen(problem_name ".out", "w", stdout) != NULL);
    #endif
    
    vector< int > inversion;
    for (int x; cin >> x; ) {
      inversion.push_back( x );
    }
    
    int n = inversion.size();
    
    vector< int > permutation;
    for (int i = n - 1; i >= 0; --i) {
      int left = inversion[i];
      permutation.insert( permutation.begin() + left, i );
    }
    
    //for (int i = 0; i < n; ++i) {
    //  printf("%d ", permutation[i]);
    //}
    //puts("");
    
    vector< int > inverse_permutation(n);
    for (int i = 0; i < n; ++i) {
      inverse_permutation[ permutation[i] ] = i;
    }
    
    //puts("inverse permutation:");
    //for (int i = 0; i < n; ++i) printf("%d ", inverse_permutation[i]); puts("");
    
    
    return 0;
}


